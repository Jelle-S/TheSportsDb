<?php

namespace TheSportsDb\Entity\Repository;

use DateTime;
use TheSportsDb\Entity\EventInterface;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-14 at 09:49:14.
 */
class EventRepositoryTest extends \PHPUnit_Framework_TestCase {

  /**
   * @var EventRepository
   */
  protected $eventRepository;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    include __DIR__ . '/../../../../default_bootstrap.php';
    $this->eventRepository = isset($container) ? $container->get('thesportsdb.repository.event') : $repositoryContainer->getRepository('event');
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    $this->eventRepository = NULL;
  }

  /**
   * @covers TheSportsDb\Entity\Repository\EventRepository::byName
   * @todo   Implement testByName().
   */
  public function testByName() {
    $events = $this->eventRepository->byName('Arsenal vs');
    $this->assertNotEmpty($events);

    foreach ($events as $event) {
      // Should be an event.
      $this->assertInstanceOf(EventInterface::class, $event);
      $this->assertContains('Arsenal vs', $event->getName(), '', TRUE);
    }

    // Try a fake name.
    $events = $this->eventRepository->byName('FakeTeam1 vs FakeTeam2');
    $this->assertEmpty($events);
  }

  /**
   * @covers TheSportsDb\Entity\Repository\EventRepository::byFileName
   * @todo   Implement testByFileName().
   */
  public function testByFileName() {
    $events = $this->eventRepository->byFileName('English Premier League');
    $this->assertNotEmpty($events);

    foreach ($events as $event) {
      // Should be an event.
      $this->assertInstanceOf(EventInterface::class, $event);
      $this->assertContains('English Premier League', $event->getFilename(), '', TRUE);
    }

    // Try a fake name.
    $events = $this->eventRepository->byFileName('FakeTeam1 vs FakeTeam2');
    $this->assertEmpty($events);
  }

  /**
   * @covers TheSportsDb\Entity\Repository\EventRepository::byNameAndSeason
   * @todo   Implement testByNameAndSeason().
   */
  public function testByNameAndSeason() {
    $events = $this->eventRepository->byNameAndSeason('Arsenal vs', '1415');
    $this->assertNotEmpty($events);

    foreach ($events as $event) {
      // Should be an event.
      $this->assertInstanceOf(EventInterface::class, $event);
      $this->assertContains('Arsenal vs', $event->getName(), '', TRUE);
      $this->assertEquals('1415', $event->getSeason()->getName());
    }

    // Try a fake name.
    $events = $this->eventRepository->byNameAndSeason('FakeTeam1 vs FakeTeam2', '1415');
    $this->assertEmpty($events);

    // Try a fake season.
    $events = $this->eventRepository->byNameAndSeason('Arsenal vs', 'FakeSeason123');
    $this->assertEmpty($events);

    // Try a fake name and season.
    $events = $this->eventRepository->byNameAndSeason('FakeTeam1 vs FakeTeam2', 'FakeSeason123');
    $this->assertEmpty($events);
  }

  /**
   * @covers TheSportsDb\Entity\Repository\EventRepository::nextFiveByTeam
   * @todo   Implement testNextFiveByTeam().
   */
  public function testNextFiveByTeam() {
    $events = $this->eventRepository->nextFiveByTeam(133604);
    $this->assertNotEmpty($events);
    $this->assertEquals(5, count($events));

    foreach ($events as $event) {
      // Should be an event.
      $this->assertInstanceOf(EventInterface::class, $event);
      $this->assertContains(133604, array($event->getHomeTeam()->getId(), $event->getAwayTeam()->getId()));
    }

    // Try a fake name.
    // Bug in the api, see http://www.thesportsdb.com/forum/viewtopic.php?f=6&t=196&sid=99a29ba57ec8ee0a1b12d5f429348121
    //$events = $this->eventRepository->nextFiveByTeam('FakeTeam123');
    //$this->assertEmpty($events);
  }

  /**
   * @covers TheSportsDb\Entity\Repository\EventRepository::nextFifteenByLeague
   * @todo   Implement testNextFifteenByLeague().
   */
  public function testNextFifteenByLeague() {
    $events = $this->eventRepository->nextFifteenByLeague(4328);
    $this->assertNotEmpty($events);
    $this->assertEquals(15, count($events));

    foreach ($events as $event) {
      // Should be an event.
      $this->assertInstanceOf(EventInterface::class, $event);
      $this->assertEquals(4328, $event->getLeague()->getId());
    }

    // Try a fake name.
    $events = $this->eventRepository->nextFifteenByLeague('FakeLeague123');
    $this->assertEmpty($events);
  }

  /**
   * @covers TheSportsDb\Entity\Repository\EventRepository::nextFifteenByLeagueAndRound
   * @todo   Implement testNextFifteenByLeagueAndRound().
   */
  public function testNextFifteenByLeagueAndRound() {
    $events = $this->eventRepository->nextFifteenByLeagueAndRound(4328, 38);
    $this->assertNotEmpty($events);
    $this->assertLessThanOrEqual(15, count($events));

    foreach ($events as $event) {
      // Should be an event.
      $this->assertInstanceOf(EventInterface::class, $event);
      $this->assertEquals(4328, $event->getLeague()->getId());
      $this->assertEquals(38, $event->getRound());
    }

    // Try a fake name.
    $events = $this->eventRepository->nextFifteenByLeague('FakeLeague123');
    $this->assertEmpty($events);
  }

  /**
   * @covers TheSportsDb\Entity\Repository\EventRepository::lastFiveByTeam
   * @todo   Implement testLastFiveByTeam().
   */
  public function testLastFiveByTeam() {
    $events = $this->eventRepository->lastFiveByTeam(133604);
    $this->assertNotEmpty($events);
    $this->assertLessThanOrEqual(5, count($events));

    foreach ($events as $event) {
      // Should be an event.
      $this->assertInstanceOf(EventInterface::class, $event);
      $this->assertContains(133604, array($event->getHomeTeam()->getId(), $event->getAwayTeam()->getId()));
    }

    // Try a fake name.
    // Bug in the api, see http://www.thesportsdb.com/forum/viewtopic.php?f=6&t=196&sid=99a29ba57ec8ee0a1b12d5f429348121
    //$events = $this->eventRepository->lastFiveByTeam('FakeTeam123');
    //$this->assertEmpty($events);
  }

  /**
   * @covers TheSportsDb\Entity\Repository\EventRepository::lastFifteenByLeague
   * @todo   Implement testLastFifteenByLeague().
   */
  public function testLastFifteenByLeague() {
    $events = $this->eventRepository->lastFifteenByLeague(4328);
    $this->assertNotEmpty($events);
    $this->assertLessThanOrEqual(15, count($events));

    foreach ($events as $event) {
      // Should be an event.
      $this->assertInstanceOf(EventInterface::class, $event);
      $this->assertEquals(4328, $event->getLeague()->getId());
    }

    // Try a fake name.
    $events = $this->eventRepository->lastFifteenByLeague('FakeLeague123');
    $this->assertEmpty($events);
  }

  /**
   * @covers TheSportsDb\Entity\Repository\EventRepository::byDay
   * @todo   Implement testByDay().
   */
  public function testByDay() {
    $day = new DateTime();
    $day->setDate(2014, 1, 13);
    $events = $this->eventRepository->byDay($day);
    $this->assertNotEmpty($events);

    foreach ($events as $event) {
      // Should be an event.
      $this->assertInstanceOf(EventInterface::class, $event);
      $this->assertEquals($day->format('Y-m-d'), $event->getDate());
    }

    $events = $this->eventRepository->byDay($day, 'Soccer');
    $this->assertNotEmpty($events);

    foreach ($events as $event) {
      // Should be an event.
      $this->assertInstanceOf(EventInterface::class, $event);
      $this->assertEquals($day->format('Y-m-d'), $event->getDate());
      $this->assertEquals('Soccer', $event->getLeague()->getSport()->getName());
    }

    $events = $this->eventRepository->byDay($day, NULL, 'English Premier League');
    $this->assertNotEmpty($events);

    foreach ($events as $event) {
      // Should be an event.
      $this->assertInstanceOf(EventInterface::class, $event);
      $this->assertEquals($day->format('Y-m-d'), $event->getDate());
      $this->assertEquals('English Premier League', $event->getLeague()->getName());
    }

    $events = $this->eventRepository->byDay($day, 'Soccer', 'English Premier League');
    $this->assertNotEmpty($events);

    foreach ($events as $event) {
      // Should be an event.
      $this->assertInstanceOf(EventInterface::class, $event);
      $this->assertEquals($day->format('Y-m-d'), $event->getDate());
      $this->assertEquals('English Premier League', $event->getLeague()->getName());
      $this->assertEquals('Soccer', $event->getLeague()->getSport()->getName());
    }

    // Fake sport.
    // Bug in the api, see http://www.thesportsdb.com/forum/viewtopic.php?f=6&t=196&sid=99a29ba57ec8ee0a1b12d5f429348121
    //$events = $this->eventRepository->byDay($day, 'FakeSport123', 'English Premier League');
    //$this->assertEmpty($events);

    // Fake league.
    $events = $this->eventRepository->byDay($day, 'Soccer', 'FakeLeague123');
    $this->assertEmpty($events);

    // Fake sport and league.
    $events = $this->eventRepository->byDay($day, 'FakeSport123', 'FakeLeague123');
    $this->assertEmpty($events);
  }

  /**
   * @covers TheSportsDb\Entity\Repository\EventRepository::byLeagueRoundAndSeason
   * @todo   Implement testByLeagueRoundAndSeason().
   */
  public function testByLeagueRoundAndSeason() {
    $events = $this->eventRepository->byLeagueRoundAndSeason(4328, 38, '1415');
    $this->assertNotEmpty($events);

    foreach ($events as $event) {
      // Should be an event.
      $this->assertInstanceOf(EventInterface::class, $event);
      $this->assertEquals(4328, $event->getLeague()->getId());
      $this->assertEquals(38, $event->getRound());
      $this->assertEquals('1415', $event->getSeason()->getName());
    }

    // Fake league.
    $events = $this->eventRepository->byLeagueRoundAndSeason('FakeLeague123', 38, '1415');
    $this->assertEmpty($events);

    // Fake round.
    $events = $this->eventRepository->byLeagueRoundAndSeason(4328, 'FakeRound123', '1415');
    $this->assertEmpty($events);

    // Fake season.
    $events = $this->eventRepository->byLeagueRoundAndSeason(4328, 38, 'FakeSeason123');
    $this->assertEmpty($events);

    // Fake league and round.
    $events = $this->eventRepository->byLeagueRoundAndSeason('FakeLeague123', 'FakeRound123', '1415');
    $this->assertEmpty($events);

    // Fake round and season.
    $events = $this->eventRepository->byLeagueRoundAndSeason(4328, 'FakeRound123', 'FakeSeason123');
    $this->assertEmpty($events);

    // Fake league and season.
    $events = $this->eventRepository->byLeagueRoundAndSeason('FakeLeague123', 38, 'FakeSeason123');
    $this->assertEmpty($events);

    // Fake league round and season.
    $events = $this->eventRepository->byLeagueRoundAndSeason('FakeLeague123', 'FakeRound123', 'FakeSeason123');
    $this->assertEmpty($events);
  }

  /**
   * @covers TheSportsDb\Entity\Repository\EventRepository::byLeagueAndSeason
   * @todo   Implement testByLeagueAndSeason().
   */
  public function testByLeagueAndSeason() {
    $events = $this->eventRepository->byLeagueAndSeason(4328, '1415');
    $this->assertNotEmpty($events);

    foreach ($events as $event) {
      // Should be an event.
      $this->assertInstanceOf(EventInterface::class, $event);
      $this->assertEquals(4328, $event->getLeague()->getId());
      $this->assertEquals('1415', $event->getSeason()->getName());
    }

    // Fake league.
    $events = $this->eventRepository->byLeagueAndSeason('FakeLeague123', 38);
    $this->assertEmpty($events);

    // Fake season.
    $events = $this->eventRepository->byLeagueAndSeason(4328, 'FakeSeason123');
    $this->assertEmpty($events);

    // Fake league and season.
    $events = $this->eventRepository->byLeagueAndSeason('FakeLeague123', 'FakeSeason123');
    $this->assertEmpty($events);
  }

}
