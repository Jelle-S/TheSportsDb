<?php

namespace TheSportsDb\Test\Entity\Repository;

use TheSportsDb\Entity\TeamInterface;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-14 at 08:23:58.
 */
class TeamRepositoryTest extends \PHPUnit_Framework_TestCase {

  /**
   * @var \TheSportsDb\Entity\Repository\TeamRepository
   */
  protected $teamRepository;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    include __DIR__ . '/../../../../default_bootstrap.php';
    $this->teamRepository = isset($container) ? $container->get('thesportsdb.repository.team') : $repositoryContainer->getRepository('team');
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    $this->teamRepository = NULL;
  }

  /**
   * @covers TheSportsDb\Entity\Repository\TeamRepository::byName
   */
  public function testByName() {
    $teams = $this->teamRepository->byName('Arsenal');
    $this->assertNotEmpty($teams);

    foreach ($teams as $team) {
      // Should be a team.
      $this->assertInstanceOf(TeamInterface::class, $team);
      $this->assertContains('Arsenal', $team->getName());
    }

    // Try a fake team.
    $teams = $this->teamRepository->byName('FakeTeam123');
    $this->assertEmpty($teams);
  }

  /**
   * @covers TheSportsDb\Entity\Repository\TeamRepository::byLeagueName
   */
  public function testByLeagueName() {
    $teams = $this->teamRepository->byLeagueName('English Premier League');
    $this->assertNotEmpty($teams);

    foreach ($teams as $team) {
      // Should be a team.
      $this->assertInstanceOf(TeamInterface::class, $team);
      $this->assertEquals('English Premier League', $team->getLeague()->getName());
    }

    // Try a fake league.
    $teams = $this->teamRepository->byLeagueName('FakeLeague123');
    $this->assertEmpty($teams);
  }

  /**
   * @covers TheSportsDb\Entity\Repository\TeamRepository::bySportAndCountry
   * @todo   Implement testBySportAndCountry().
   */
  public function testBySportAndCountry() {
    $teams = $this->teamRepository->bySportAndCountry('Soccer', 'Belgium');
    $this->assertNotEmpty($teams);
    foreach ($teams as $team) {
      // Should be a team.
      $this->assertInstanceOf(TeamInterface::class, $team);
      $this->assertEquals('Belgium', $team->getCountry());
      $this->assertEquals('Soccer', $team->getSport()->getName());
    }

    // Try a fake country.
    $teams = $this->teamRepository->bySportAndCountry('Soccer', 'FakeCountry123');
    $this->assertEmpty($teams);

    // Try a fake sport.
    $teams = $this->teamRepository->bySportAndCountry('FakeSport123', 'Belgium');
    $this->assertEmpty($teams);

    // Try a fake country and sport.
    $teams = $this->teamRepository->bySportAndCountry('FakeSport123', 'FakeCountry123');
    $this->assertEmpty($teams);
  }

  /**
   * @covers TheSportsDb\Entity\Repository\TeamRepository::byLeague
   */
  public function testByLeague() {
    $teams = $this->teamRepository->byLeague(4328);
    $this->assertNotEmpty($teams);

    foreach ($teams as $team) {
      // Should be a team.
      $this->assertInstanceOf(TeamInterface::class, $team);
      $this->assertEquals(4328, $team->getLeague()->getId());
    }

    // Try a fake league.
    $teams = $this->teamRepository->byLeague('FakeLeague123');
    $this->assertEmpty($teams);
  }

}
