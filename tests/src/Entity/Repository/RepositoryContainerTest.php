<?php

namespace TheSportsDb\Test\Entity\Repository;

use TheSportsDb\Entity\Repository\RepositoryContainer;
use TheSportsDb\Entity\Repository\RepositoryInterface;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-14 at 09:05:24.
 */
class RepositoryContainerTest extends \PHPUnit_Framework_TestCase {

  /**
   * @var RepositoryContainer
   */
  protected $repositoryContainer;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->repositoryContainer = new RepositoryContainer();
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    $this->repositoryContainer = NULL;
  }

  /**
   * @covers TheSportsDb\Entity\Repository\RepositoryContainer::addRepository
   */
  public function testAddRepository() {
    $repository = $this->getMockBuilder(RepositoryInterface::class)->getMock();
    $repository->expects($this->once())->method('getEntityTypeName')->willReturn('testEntityType');
    $this->repositoryContainer->addRepository($repository);
    $this->assertEquals($repository, $this->repositoryContainer->getRepository('testEntityType'));
  }

  /**
   * @covers TheSportsDb\Entity\Repository\RepositoryContainer::getRepository
   */
  public function testGetRepository() {
    $this->expectException(\Exception::class);
    $this->expectExceptionMessage('No repository registered for testEntityType');
    $this->repositoryContainer->getRepository('testEntityType');

    $repository = $this->getMockBuilder(RepositoryInterface::class)->getMock();
    $repository->expects($this->once())->method('getEntityTypeName')->willReturn('testEntityType');
    $this->repositoryContainer->addRepository($repository);
    $this->assertEquals($repository, $this->repositoryContainer->getRepository('testEntityType'));
  }

}
