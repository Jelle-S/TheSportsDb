<?php

namespace TheSportsDb\Test\Entity\Repository;

use GuzzleHttp\Client;
use TheSportsDb\Entity\Entity;
use TheSportsDb\Entity\EntityManagerInterface;
use TheSportsDb\Entity\Factory\Factory;
use TheSportsDb\Entity\Repository\Repository;
use TheSportsDb\Http\TheSportsDbClient;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-14 at 09:13:45.
 */
class RepositoryTest extends \PHPUnit_Framework_TestCase {

  /**
   * @var Repository
   */
  protected $repository;

  protected $manager;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    // Http client.
    $httpClient = new Client();
    // The sports db client.
    $sportsDbClient = new TheSportsDbClient('1', $httpClient);
    $this->manager = $this->getMockBuilder(EntityManagerInterface::class)->getMock();

    $this->repository = new TestRepository($sportsDbClient, $this->manager);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    $this->manager = NULL;
    $this->repository = NULL;
  }

  /**
   * @covers TheSportsDb\Entity\Repository\Repository::byId
   */
  public function testById() {
    $entity = $this->getMockBuilder(Entity::class)->disableOriginalConstructor()->getMock();
    $factory = $this->getMockBuilder(Factory::class)->disableOriginalConstructor()->getMock();
    $factory
      ->expects($this->once())
      ->method('create')
      ->with(
        (object) array('id' => 'id'),
        'testEntityType'
      )
      ->willReturn($entity);
    $this->manager
      ->expects($this->once())
      ->method('factory')
      ->with('testEntityType')
      ->willReturn($factory);
    $this->assertEquals($entity, $this->repository->byId('id'));

  }

  /**
   * @covers TheSportsDb\Entity\Repository\Repository::clear
   * @todo   Implement testClear().
   */
  public function testClear() {
    $entity = $this->getMockBuilder(Entity::class)->disableOriginalConstructor()->getMock();
    $factory = $this->getMockBuilder(Factory::class)->disableOriginalConstructor()->getMock();
    $factory
      ->expects($this->exactly(2))
      ->method('create')
      ->with(
        (object) array('id' => 'id'),
        'testEntityType'
      )
      ->willReturn($entity);
    $this->manager
      ->expects($this->exactly(2))
      ->method('factory')
      ->with('testEntityType')
      ->willReturn($factory);
    $this->assertEquals($entity, $this->repository->byId('id'));
    $this->repository->clear('id');
    $this->assertEquals($entity, $this->repository->byId('id'));
  }

  /**
   * @covers TheSportsDb\Entity\Repository\Repository::getEntityTypeName
   */
  public function testGetEntityTypeName() {
    $this->assertEquals('testEntityType', $this->repository->getEntityTypeName());
  }

}
