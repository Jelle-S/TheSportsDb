<?php

namespace TheSportsDb\Test\Entity;

use FastNorth\PropertyMapper\MapperInterface;
use TheSportsDb\Entity\Entity;
use TheSportsDb\Entity\EntityManager;
use TheSportsDb\Entity\EntityManagerInterface;
use TheSportsDb\Entity\League;
use TheSportsDb\Entity\Repository\Repository;
use TheSportsDb\Entity\Repository\RepositoryContainerInterface;
use TheSportsDb\Entity\Sport;
use TheSportsDb\PropertyMapper\PropertyMapDefinition;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-12 at 14:57:11.
 */
class EntityTest extends \PHPUnit_Framework_TestCase {

  /**
   * @var Entity
   */
  protected $entity;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->entity = $this->getMockBuilder('\\TheSportsDb\\Entity\\Entity')
      ->disableOriginalConstructor()
      ->setMethods(array('getId', 'getName'))
      ->getMock();
    $this->entity->id = 'id';
    $this->entity->name = 'name';
    $this->entity->expects($this->any())->method('getId')->will($this->returnValue('id'));
    $this->entity->expects($this->any())->method('getName')->will($this->returnValue('name'));
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    $this->entity = NULL;
  }

  /**
   * @covers TheSportsDb\Entity\Entity::raw
   */
  public function testRaw() {
    $raw = $this->entity->raw();
    $this->assertTrue(isset($raw->id));
    $this->assertTrue(isset($raw->name));
    $this->assertEquals('id', $raw->id);
    $this->assertEquals('name', $raw->name);
  }

  /**
   * @covers TheSportsDb\Entity\Entity::update
   */
  public function testUpdate() {
    $update_vals = array('id' => 'newId', 'name' => 'newName');
    $this->entity->update((object) $update_vals);
    foreach ($update_vals as $prop => $val) {
      $this->assertEquals($val, $this->entity->{$prop});
    }
  }

  /**
   * @covers TheSportsDb\Entity\Entity::getEntityType
   */
  public function testGetEntityType() {
    $this->assertEquals('entity', Entity::getEntityType());
    $this->assertEquals('sport', Sport::getEntityType());
    $this->assertEquals('league', League::getEntityType());
  }

  /**
   * @covers TheSportsDb\Entity\Entity::getPropertyMapDefinition
   */
  public function testGetPropertyMapDefinition() {
    // If something goes wrong an exception will be thrown
    $this->assertInstanceOf(PropertyMapDefinition::class, TestEntity::getPropertyMapDefinition());
    TestEntity::resetStatics(array('get'));
    $this->assertInstanceOf(PropertyMapDefinition::class, TestEntity::getPropertyMapDefinition());
  }

  /**
   * @covers TheSportsDb\Entity\Entity::reverse
   */
  public function testReverse() {
    $this->assertEquals('id', Entity::reverse($this->entity, NULL, $this->getMockBuilder(EntityManagerInterface::class)->getMock()));
  }

  /**
   * @covers TheSportsDb\Entity\Entity::reverseArray
   */
  public function testReverseArray() {
    $entity2 = $this->getMockBuilder('\\TheSportsDb\\Entity\Entity')
      ->disableOriginalConstructor()
      ->setMethods(array('getId', 'getName'))
      ->getMock();
    $entity2->id = 'id2';
    $entity2->name = 'name2';
    $entity2->expects($this->any())->method('getId')->will($this->returnValue('id2'));
    $entity2->expects($this->any())->method('getName')->will($this->returnValue('name2'));
    $entities = array($this->entity, $entity2);
    $this->assertEquals(array('id', 'id2'), Entity::reverseArray($entities, NULL, $this->getMockBuilder(EntityManagerInterface::class)->getMock()));
  }

  /**
   * @covers TheSportsDb\Entity\Entity::transform
   */
  public function testTransform() {
    $mapper = $this->getMockBuilder(MapperInterface::class)->getMock();
    $entityManager = new EntityManager($mapper);
    $repository = $this->getMockBuilder(Repository::class)->disableOriginalConstructor()->getMock();
    $repository->expects($this->once())->method('byId')->willReturn($this->entity);
    $repositoryContainer = $this->getMockBuilder(RepositoryContainerInterface::class)->getMock();
    $repositoryContainer
      ->expects($this->once())
      ->method('getRepository')
      ->with('testEntityType')
      ->willReturn($repository);
    $entityManager->setRepositoryContainer($repositoryContainer);
    $this->assertEquals($this->entity, Entity::transform('id', NULL, $entityManager, 'testEntityType', 'id'));
  }

  /**
   * @covers TheSportsDb\Entity\Entity::transformHelper
   */
  public function testTransformHelper() {
    $result = Entity::transformHelper('id', (object) array('testProp' => 'testVal'), 'id', array('testProp' => 'destTestProp'));
    $this->assertEquals('id', $result['id']);
    $this->assertEquals((object) array('id' => 'id', 'destTestProp' => 'testVal'), $result['object']);
  }

}
