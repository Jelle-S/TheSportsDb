<?php

namespace TheSportsDb\Test\Entity;

use FastNorth\PropertyMapper\Mapper;
use FastNorth\PropertyMapper\MapperInterface;
use TheSportsDb\Entity\EntityManager;
use TheSportsDb\Entity\Factory\FactoryContainerInterface;
use TheSportsDb\Entity\Repository\RepositoryContainerInterface;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-08 at 10:34:14.
 */
class EntityManagerTest extends \PHPUnit_Framework_TestCase {

  /**
   * @var EntityManager
   */
  protected $entityManager;

  /**
   * @var MapperInterface
   */
  protected $mapper;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->mapper = new Mapper();
    $this->entityManager = new EntityManager($this->mapper);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    $this->mapper = NULL;
    $this->entityManager = NULL;
    TestEntity::resetStatics();
  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::setFactoryContainer
   */
  public function testSetFactoryContainer() {
    $factoryContainer = $this->getMockBuilder(FactoryContainerInterface::class)->getMock();
    // Once should be fine.
    $this->entityManager->setFactoryContainer($factoryContainer);

    // Container already set == Exception.
    $this->expectException(\Exception::class);
    $this->expectExceptionMessage('Factory container already set.');
    $this->entityManager->setFactoryContainer($factoryContainer);
  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::setRepositoryContainer
   */
  public function testSetRepositoryContainer() {
    $repositoryContainer = $this->getMockBuilder(RepositoryContainerInterface::class)->getMock();
    // Once should be fine.
    $this->entityManager->setRepositoryContainer($repositoryContainer);

    // Container already set == Exception.
    $this->expectException(\Exception::class);
    $this->expectExceptionMessage('Repository container already set.');
    $this->entityManager->setRepositoryContainer($repositoryContainer);
  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::repository
   */
  public function testRepository() {
    $this->expectException(\Exception::class);
    $this->expectExceptionMessage('No repository container set.');
    $this->entityManager->repository('testEntityType');
    $repositoryContainer = $this->getMockBuilder(RepositoryContainerInterface::class)->getMock();
    $repositoryContainer
      ->expects($this->once())
      ->method('getRepository')
      ->with('testEntityType')
      ->willReturn('testRepository');
    $this->entityManager->setRepositoryContainer($repositoryContainer);
    $this->assertEquals('testRepository', $this->entityManager->repository('testEntityType'));
  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::factory
   */
  public function testFactory() {
    $this->expectException(\Exception::class);
    $this->expectExceptionMessage('No factory container set.');
    $this->entityManager->factory('testEntityType');
    $repositoryContainer = $this->getMockBuilder(FactoryContainerInterface::class)->getMock();
    $factoryContainer
      ->expects($this->once())
      ->method('getFactory')
      ->with('testEntityType')
      ->willReturn('testFactory');
    $this->entityManager->setFactoryContainer($factoryContainer);
    $this->assertEquals('testFactory', $this->entityManager->factory('testEntityType'));
  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::registerClass
   */
  public function testRegisterClass() {
    $this->assertEquals(
      array(
        'real' => 'TheSportsDb\\Entity\\Team',
        'proxy' => 'TheSportsDb\\Entity\\Proxy\\TeamProxy',
      ),
      $this->entityManager->registerClass('team')
    );

    $this->assertEquals(
      array(
        'real' => 'TheSportsDb\\Entity\\Team',
        'proxy' => 'TheSportsDb\\Entity\\Proxy\\TeamProxy',
      ),
      $this->entityManager->registerClass('team', 'TheSportsDb\\Entity\\Team', 'TheSportsDb\\Entity\\Proxy\\TeamProxy')
    );

    $this->expectException(\Exception::class);
    $this->expectExceptionMessage('Class SomeFakeClass not found.');
    $this->entityManager->registerClass('team', 'SomeFakeClass');

    $this->expectException(\Exception::class);
    $this->expectExceptionMessage('Class SomeFakeClass not found.');
    $this->entityManager->registerClass('team', NULL, 'SomeFakeClass');

  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::getPropertyMapDefinition
   */
  public function testGetPropertyMapDefinition() {
    $this->entityManager->registerClass('testEntity', 'TheSportsDb\\Test\\Entity\\TestEntity');
    // If something goes wrong an exception will be thrown.
    $this->entityManager->getPropertyMapDefinition('testEntity');
    $this->entityManager->getPropertyMapDefinition('testEntity');
  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::getClass
   */
  public function testGetClass() {
    $this->entityManager->registerClass('testEntity', 'TheSportsDb\\Test\\Entity\\TestEntity');
    $this->assertEquals('TheSportsDb\\Test\\Entity\\TestEntity', $this->entityManager->getClass('testEntity'));
    $this->assertEquals('TheSportsDb\\Test\\Entity\\Proxy\\TestEntityProxy', $this->entityManager->getClass('testEntity', 'proxy'));
  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::mapProperties
   * @covers TheSportsDb\Entity\EntityManager::sanitizeObject
   * @covers TheSportsDb\Entity\EntityManager::isEmptyValue
   */
  public function testMapProperties() {
    $this->entityManager->registerClass('testEntity', 'TheSportsDb\\Test\\Entity\\TestEntity');
    $values = (object) array('testId' => '123', 'testName' => 'name123');
    $this->assertEquals((object) array('id' => '123', 'name' => 'name123'), $this->entityManager->mapProperties($values, 'testEntity'));
    $values = (object) array('testId' => '123');
    $mapped = $this->entityManager->mapProperties($values, 'testEntity');
    $this->assertFalse(isset($mapped->name));
    $this->assertEquals((object) array('id' => '123'), $mapped);
  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::reverseMapProperties
   */
  public function testReverseMapProperties() {
    $this->entityManager->registerClass('testEntity', 'TheSportsDb\\Test\\Entity\\TestEntity');
    $values = (object) array('id' => '123', 'name' => 'name123');
    $this->assertEquals((object) array('testId' => '123', 'testName' => 'name123'), $this->entityManager->reverseMapProperties($values, 'testEntity'));
    $values = (object) array('id' => '123');
    $mapped = $this->entityManager->reverseMapProperties($values, 'testEntity');
    $this->assertFalse(isset($mapped->testName));
    $this->assertEquals((object) array('testId' => '123'), $mapped);
  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::isFullObject
   */
  public function testIsFullObject() {
    $this->entityManager->registerClass('testEntity', 'TheSportsDb\\Test\\Entity\\TestEntity');
    $this->assertTrue($this->entityManager->isFullObject((object) array('id' => '123', 'name' => 'name123'), 'testEntity'));
    $this->assertFalse($this->entityManager->isFullObject((object) array('id' => '123'), 'testEntity'));
  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::isEmptyValue
   * @todo   Implement testIsEmptyValue().
   */
  public function testIsEmptyValue() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
      'This test has not been implemented yet.'
    );
  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::sanitizeValues
   * @todo   Implement testSanitizeValues().
   */
  public function testSanitizeValues() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
      'This test has not been implemented yet.'
    );
  }

}
