<?php

namespace TheSportsDb\Test\Entity;

use TheSportsDb\Entity\EntityManager;
use FastNorth\PropertyMapper\MapperInterface;
use TheSportsDb\Entity\Factory\FactoryContainerInterface;
use TheSportsDb\Entity\Repository\RepositoryContainerInterface;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-08 at 10:34:14.
 */
class EntityManagerTest extends \PHPUnit_Framework_TestCase {

  /**
   * @var EntityManager
   */
  protected $entityManager;

  /**
   * @var MapperInterface
   */
  protected $mapper;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->mapper = $this->getMockBuilder(MapperInterface::class)->getMock();
    $this->entityManager = new EntityManager($this->mapper);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    $this->mapper = NULL;
    $this->entityManager = NULL;
  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::setFactoryContainer
   */
  public function testSetFactoryContainer() {
    $factoryContainer = $this->getMockBuilder(FactoryContainerInterface::class)->getMock();
    // Once should be fine.
    $this->entityManager->setFactoryContainer($factoryContainer);

    // Container already set == Exception.
    $this->expectException(\Exception::class);
    $this->expectExceptionMessage('Factory container already set.');
    $this->entityManager->setFactoryContainer($factoryContainer);
  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::setRepositoryContainer
   */
  public function testSetRepositoryContainer() {
    $repositoryContainer = $this->getMockBuilder(RepositoryContainerInterface::class)->getMock();
    // Once should be fine.
    $this->entityManager->setRepositoryContainer($repositoryContainer);

    // Container already set == Exception.
    $this->expectException(\Exception::class);
    $this->expectExceptionMessage('Repository container already set.');
    $this->entityManager->setRepositoryContainer($repositoryContainer);
  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::repository
   */
  public function testRepository() {
    $this->expectException(\Exception::class);
    $this->expectExceptionMessage('No repository container set.');
    $this->entityManager->repository('testEntityType');
    $repositoryContainer = $this->getMockBuilder(RepositoryContainerInterface::class)->getMock();
    $repositoryContainer
      ->expects($this->once())
      ->method('getRepository')
      ->with('testEntityType')
      ->willReturn('testRepository');
    $this->entityManager->setRepositoryContainer($repositoryContainer);
    $this->assertEquals('testRepository', $this->entityManager->repository('testEntityType'));
  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::factory
   */
  public function testFactory() {
    $this->expectException(\Exception::class);
    $this->expectExceptionMessage('No factory container set.');
    $this->entityManager->factory('testEntityType');
    $repositoryContainer = $this->getMockBuilder(FactoryContainerInterface::class)->getMock();
    $factoryContainer
      ->expects($this->once())
      ->method('getFactory')
      ->with('testEntityType')
      ->willReturn('testFactory');
    $this->entityManager->setFactoryContainer($factoryContainer);
    $this->assertEquals('testFactory', $this->entityManager->factory('testEntityType'));
  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::registerClass
   * @todo   Implement testRegisterClass().
   */
  public function testRegisterClass() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
      'This test has not been implemented yet.'
    );
  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::getPropertyMapDefinition
   * @todo   Implement testGetPropertyMapDefinition().
   */
  public function testGetPropertyMapDefinition() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
      'This test has not been implemented yet.'
    );
  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::getClass
   * @todo   Implement testGetClass().
   */
  public function testGetClass() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
      'This test has not been implemented yet.'
    );
  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::mapProperties
   * @todo   Implement testMapProperties().
   */
  public function testMapProperties() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
      'This test has not been implemented yet.'
    );
  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::reverseMapProperties
   * @todo   Implement testReverseMapProperties().
   */
  public function testReverseMapProperties() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
      'This test has not been implemented yet.'
    );
  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::isFullObject
   * @todo   Implement testIsFullObject().
   */
  public function testIsFullObject() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
      'This test has not been implemented yet.'
    );
  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::isEmptyValue
   * @todo   Implement testIsEmptyValue().
   */
  public function testIsEmptyValue() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
      'This test has not been implemented yet.'
    );
  }

  /**
   * @covers TheSportsDb\Entity\EntityManager::sanitizeValues
   * @todo   Implement testSanitizeValues().
   */
  public function testSanitizeValues() {
    // Remove the following lines when you implement this test.
    $this->markTestIncomplete(
      'This test has not been implemented yet.'
    );
  }

}
