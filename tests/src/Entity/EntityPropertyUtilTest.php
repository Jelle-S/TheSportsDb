<?php

namespace TheSportsDb\Test\Entity;

use TheSportsDb\Entity\EntityPropertyUtil;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-08 at 10:18:13.
 */
class EntityPropertyUtilTest extends \PHPUnit_Framework_TestCase {

  /**
   * @covers TheSportsDb\Entity\EntityPropertyUtil::getRawValue
   */
  public function testGetRawValue() {
    // Simple value.
    $this->assertEquals('test', EntityPropertyUtil::getRawValue('test'));

    // Complex value.
    $mock = $this->getMockBuilder('\\stdClass')->setMethods(array('raw'))->getMock();
    $mock->expects($this->once())->method('raw')->willReturn('rawVal');
    $this->assertEquals('rawVal', EntityPropertyUtil::getRawValue($mock));

    // Simple array.
    $value = array('test1', 'test2', 'test3');
    $this->assertEquals($value, EntityPropertyUtil::getRawValue($value));

    // Complex array.
    $mock1 = $this->getMockBuilder('\\stdClass')->setMethods(array('raw'))->getMock();
    $mock1->expects($this->once())->method('raw')->willReturn('rawVal1');
    $mock2 = $this->getMockBuilder('\\stdClass')->setMethods(array('raw'))->getMock();
    $mock2->expects($this->once())->method('raw')->willReturn('rawVal2');
    $values = array($mock1, $mock2);
    $expected = array('rawVal1', 'rawVal2');
    $this->assertEquals($expected, EntityPropertyUtil::getRawValue($values));

  }

}
