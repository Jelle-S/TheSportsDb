<?php

namespace TheSportsDb\Test\Entity\Factory;

use TheSportsDb\Entity\Factory\Factory;
use TheSportsDb\Entity\Factory\FactoryContainer;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-14 at 15:22:09.
 */
class FactoryContainerTest extends \PHPUnit_Framework_TestCase {

  /**
   * @var FactoryContainer
   */
  protected $factoryContainer;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->factoryContainer = new FactoryContainer();
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    $this->factoryContainer = NULL;
  }

  /**
   * @covers TheSportsDb\Entity\Factory\FactoryContainer::addFactory
   */
  public function testAddFactory() {
    $factory = $this->getMockBuilder(Factory::class)->disableOriginalConstructor()->getMock();
    $this->factoryContainer->addFactory($factory, 'testEntityType');
    $this->assertEquals($factory, $this->factoryContainer->getFactory('testEntityType'));
  }

  /**
   * @covers TheSportsDb\Entity\Factory\FactoryContainer::getFactory
   */
  public function testGetFactory() {
    $this->expectException(\Exception::class);
    $this->expectExceptionMessage('No factory registered for testEntityType and no default factory configured.');
    $this->factoryContainer->getFactory('testEntityType');

    $factory = $this->getMockBuilder(Factory::class)->disableOriginalConstructor()->getMock();
    $this->factoryContainer->setDefaultFactory($factory);
    $this->assertEquals($factory, $this->factoryContainer->getFactory('testEntityType'));

    $factory2 = $this->getMockBuilder(Factory::class)->disableOriginalConstructor()->getMock();
    $this->factoryContainer->addFactory($factory2, 'testEntityType');
    $this->assertEquals($factory2, $this->factoryContainer->getFactory('testEntityType'));
  }

  /**
   * @covers TheSportsDb\Entity\Factory\FactoryContainer::setDefaultFactory
   */
  public function testSetDefaultFactory() {
    $factory = $this->getMockBuilder(Factory::class)->disableOriginalConstructor()->getMock();
    $this->factoryContainer->setDefaultFactory($factory);
    $this->assertEquals($factory, $this->factoryContainer->getFactory('testEntityType'));
    $this->assertEquals($factory, $this->factoryContainer->getFactory('testEntityType2'));
  }

}
