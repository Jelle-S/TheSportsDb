<?php

namespace TheSportsDb\Test\Entity\Factory;

use TheSportsDb\Entity\EntityManager;
use TheSportsDb\Entity\Factory\Factory;
use TheSportsDb\Entity\Proxy\Proxy;
use TheSportsDb\Http\TheSportsDbClient;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-15 at 08:36:52.
 */
class FactoryTest extends \PHPUnit_Framework_TestCase {

  /**
   * @var Factory
   */
  protected $factory;

  protected $manager;

  protected $client;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->manager = $this->getMockBuilder(EntityManager::class)
      ->setMethods(array('isFullObject', 'getClass'))
      ->disableOriginalConstructor()
      ->getMock();
    $this->client = $this->getMockBuilder(TheSportsDbClient::class)->disableOriginalConstructor()->getMock();
    $this->factory = new Factory($this->client, $this->manager);
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    $this->manager = NULL;
    $this->client = NULL;
    $this->factory = NULL;
  }

  /**
   * @covers TheSportsDb\Entity\Factory\Factory::create
   * @covers TheSportsDb\Entity\Factory\Factory::finalizeEntity
   */
  public function testCreate() {
    $proxy = $this->getMockClass(Proxy::class, array(), array(), 'testEntityTypeProxy');
    $this->manager->expects($this->at(0))->method('isFullObject')->willReturn(FALSE);
    $this->manager->expects($this->at(0))->method('getClass')->with('testEntityType', 'proxy')->willReturn($proxy);
    $this->assertInstanceOf($proxy, $this->factory->create((object) array('id' => '123'), 'testEntityType'));

    $entity = $this->getMockClass(\TheSportsDb\Entity\Entity::class, array(), array(), 'testEntityType');
    $this->manager->expects($this->at(1))->method('isFullObject')->willReturn(TRUE);
    $this->manager->expects($this->at(1))->method('getClass')->with('testEntityType')->willReturn($entity);
    $this->assertInstanceOf($entity, $this->factory->create((object) array('id' => '123'), 'testEntityType'));
  }

  /**
   * @covers TheSportsDb\Entity\Factory\Factory::getEntityManager
   */
  public function testGetEntityManager() {
    $this->assertEquals($this->manager, $this->factory->getEntityManager());
  }

}
