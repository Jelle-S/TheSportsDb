<?php

namespace TheSportsDb\Test\Entity\Proxy;

use TheSportsDb\Entity\EntityManagerInterface;
use TheSportsDb\Entity\Proxy\LeagueProxy;
use TheSportsDb\Entity\Proxy\Proxy;
use TheSportsDb\Entity\Proxy\SportProxy;
use TheSportsDb\Http\TheSportsDbClientInterface;
use TheSportsDb\PropertyMapper\PropertyMapDefinition;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-09-14 at 12:27:04.
 */
class ProxyTest extends \PHPUnit_Framework_TestCase {
  /**
   * @var Proxy
   */
  protected $proxy;

  /**
   * Sets up the fixture, for example, opens a network connection.
   * This method is called before a test is executed.
   */
  protected function setUp() {
    $this->proxy = $this->getMockBuilder('\\TheSportsDb\\Entity\\Proxy\\Proxy')
      ->disableOriginalConstructor()
      ->setMethods(array('getId', 'getName'))
      ->getMock();
    $this->proxy->id = 'id';
    $this->proxy->name = 'name';
    $this->proxy->expects($this->any())->method('getId')->will($this->returnValue('id'));
    $this->proxy->expects($this->any())->method('getName')->will($this->returnValue('name'));
  }

  /**
   * Tears down the fixture, for example, closes a network connection.
   * This method is called after a test is executed.
   */
  protected function tearDown() {
    $this->proxy = NULL;
  }

  /**
   * @covers TheSportsDb\Entity\Entity::raw
   */
  public function testRaw() {
    $raw = $this->proxy->raw();
    $this->assertTrue(isset($raw->id));
    $this->assertTrue(isset($raw->name));
    $this->assertEquals('id', $raw->id);
    $this->assertEquals('name', $raw->name);
  }

  /**
   * @covers TheSportsDb\Entity\Entity::update
   */
  public function testUpdate() {
    $update_vals = array('id' => 'newId', 'name' => 'newName');
    $this->proxy->update((object) $update_vals);
    foreach ($update_vals as $prop => $val) {
      $this->assertEquals($val, $this->proxy->{$prop});
    }
  }

  /**
   * @covers TheSportsDb\Entity\Entity::getEntityType
   */
  public function testGetEntityType() {
    $this->assertEquals('proxy', Proxy::getEntityType());
    $this->assertEquals('sport', SportProxy::getEntityType());
    $this->assertEquals('league', LeagueProxy::getEntityType());
  }

  /**
   * @covers TheSportsDb\Entity\Entity::getPropertyMapDefinition
   */
  public function testGetPropertyMapDefinition() {
    // If something goes wrong an exception will be thrown
    $this->assertInstanceOf(PropertyMapDefinition::class, TestProxy::getPropertyMapDefinition());
    $this->assertInstanceOf(PropertyMapDefinition::class, TestProxy::getPropertyMapDefinition());
  }

  /**
   * @covers TheSportsDb\Entity\Proxy\Proxy::setEntityManager
   */
  public function testSetEntityManager() {
    $this->proxy->setEntityManager($this->getMockBuilder(EntityManagerInterface::class)->getMock());
  }

  /**
   * @covers TheSportsDb\Entity\Proxy\Proxy::setSportsDbClient
   */
  public function testSetSportsDbClient() {
    $this->proxy->setSportsDbClient($this->getMockBuilder(TheSportsDbClientInterface::class)->getMock());
  }

}
